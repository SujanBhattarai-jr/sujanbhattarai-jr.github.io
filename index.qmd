
```{=html}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Areas of Proficiency</title>
  <style>
    body {
      font-family: sans-serif;
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      overflow: hidden; /* Hide scrollbars */
      background-color: #213343; /* Space-like background color */
      color: white; /* Text color */
      position: relative;
    }
    .torchlight {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background: radial-gradient(circle at center, rgba(255, 255, 0, 0.15), transparent 200px);
      transition: background 0.2s ease-out;
    }
    .areas-of-interest {
      text-align: center;
      margin: 0 auto;
      width: 120%;
      height: calc(100vh - 100px); /* Set height to 100% of the viewport height minus height of about-me section */
      padding: 15px 20px;
      position: relative;
      z-index: 1;
    }

    .areas-of-interest h2 {
      font-size: 2em;
      margin-bottom: 20px;
    }
    .areas-of-interest p {
      font-size: 1em;
      font-family: cursive;
      line-height: 1.5;
      margin-bottom: 10px;
      text-align: center;
    }
    .colu {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 20px;
      justify-items: center;
    }
    .colus {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding: 20px;
      border: 1px solid #444;
      border-radius: 5px;
      transition: background 0.3s ease-out;
      background-color: rgba(255, 255, 255, 0.1);
    }
    .colus h3, .colus p {
      color: white; /* Dim text color */
      transition: color 0.3s ease-out;
    }
    .colus:hover h3, .colus:hover p {
      color: white; /* Lightened text color on hover */
    }
    @media (max-width: 900px) {
      .colu {
        grid-template-columns: repeat(2, 1fr);
      }
    }
    @media (max-width: 600px) {
      .colu {
        grid-template-columns: 1fr;
      }
    }
    canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 0;
    }
    
  .about-me {
    text-align: left;
    position: absolute;
    top: 70px;
    left: 200px;
  }
  
  .name-heading {
    font-size: 1.5em;
    font-family: cursive;
    line-height: 1.5;
    margin-bottom: 10px;
    text-align: left;
  }
  
  /* Media Queries */
  @media only screen and (max-width: 768px) {
    .about-me {
      top: 30px; /* Adjust as needed for mobile view */
    }
  


  </style>
</head>

<body>
  <div class="about-me">
    <p class = "name-heading" > SUJAN BHATTARAI</br>
     Welcome to The Dataverse</p>
  </div>
  <div class="areas-of-interest">
    <div>
      <h3>Areas of Proficiency</h3>
    </div>
    <div class="colu">
      <div class="colus">
        <h3>Data Science</h3>
        <p>Enjoys analytical thinking, data-driven decisions, and content creation about Data Science</p>
      </div>
      <div class="colus">
        <h3>Machine Learning</h3>
        <p>Strong understanding of maths in ML algorithms: neural networks, tree based models, regressions</p>
      </div>
      <div class="colus">
        <h3>Causal Inference</h3>
        <p>Experience with First order effects, DID estimate, panel data, inverse weighted regression</p>
      </div>
      <div class="colus">
        <h3>Databases</h3>
        <p>Proficient at RDBMS, experience with snowflake and big data, concepts on HDFS and Hadoop </p>
      </div>
      <div class="colus">
        <h3>Modelling</h3>
        <p> Ran modelling simulations, randomize experimental designs, measure parameters uncertainties</p>
      </div>
      <div class="colus">
        <h3>Data Visualization</h3>
        <p> Knowledge of data visualization concepts, expert at ggplot and ggplot-children packages</p>
      </div>
    </div>
  </div>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    let scene, camera, renderer, stars = [];
    const numStars = 30;

    function init() {
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;

        renderer = new THREE.WebGLRenderer({ alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        const colors = [0xffffff, 0xffff00, 0xadd8e6]; // white, yellow, light blue

        for (let i = 0; i < numStars; i++) {
            let geometry = new THREE.SphereGeometry(0.1, 5, 5); // Star-shaped geometry
            let material = new THREE.MeshBasicMaterial({ color: colors[Math.floor(Math.random() * colors.length)] });
            let star = new THREE.Mesh(geometry, material);

            star.position.x = (Math.random() - 0.5) * 10;
            star.position.y = (Math.random() - 0.5) * 10;
            star.position.z = (Math.random() - 0.5) * 10;

            scene.add(star);
            stars.push(star);
        }

        animate();
    }

    function animate() {
        requestAnimationFrame(animate);

        stars.forEach(star => {
            // Add wobbling effect
            star.position.x += Math.sin(star.position.z * 2) * 0.01;
            star.position.y += Math.cos(star.position.x * 3) * 0.02;
            star.position.z += Math.sin(star.position.y * 4) * 0.02;

            // Check if the star is out of the view, if yes, reset its position
            if (
                star.position.x > 5 || star.position.x < -5 ||
                star.position.y > 5 || star.position.y < -5 ||
                star.position.z > 5 || star.position.z < -5
            ) {
                star.position.x = (Math.random() - 0.5) * 10;
                star.position.y = (Math.random() - 0.5) * 10;
                star.position.z = (Math.random() - 0.5) * 10;
            }
        });

        renderer.render(scene, camera);
    }

    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });

    init();
  </script>
</body>
</html>




```

